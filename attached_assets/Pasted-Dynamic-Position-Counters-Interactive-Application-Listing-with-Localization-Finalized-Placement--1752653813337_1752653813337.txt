Dynamic Position Counters & Interactive Application Listing with Localization (Finalized Placement & Functionality)

**Goal:** Implement two distinct and dynamic sections for displaying job position application data **entirely within the hero section**:
1.  **"Top Applied Positions"**: A set of up to 3 dynamically generated counter cards, showing positions with the most 'apply' clicks.
2.  **"All Applied Positions Listing"**: Immediately below the "Top Applied Positions" cards, a paginated and interactive listing view displaying all positions that have received at least one 'apply' click, showing "Position Name - Applied Count".

**Data Source:** All application counts **must be derived exclusively from the `position_clicks` database table where `click_type` is 'apply'**. Position names should be retrieved from the `Positions` database table.

**CRITICAL CONSTRAINTS (Reiterated & Emphasized):**
* **ALL New Components WITHIN HERO Section:** Both the "Top Applied Positions" cards and the "All Applied Positions Listing" (including its pagination and "View More"/"View Less" controls) must be contained **entirely within the existing hero section**.
* **Order within Hero:** The "All Applied Positions Listing" must be placed directly below the "Top Applied Positions" cards.
* **PRESERVE EXISTING UI/UX DESIGN (Overall Hero Layout):** The addition of these two new components within the hero section should not disrupt the overall hero section's visual integrity, the placement of the main heading, image, or primary call-to-action button ("Explore Career Opportunities"). Careful design and layout are required to integrate these new elements gracefully into the hero, ensuring it doesn't become excessively long or cluttered.
* **Design for Top Positions:** The "Top Applied Positions" cards **must use the exact design style from the provided screenshot `Screenshot 2025-07-16 at 12.26.57 PM.png`**.
* **Data Source `position_clicks`:** All counts for both sections **must be live data derived *only* from counting `click_type: "apply"` entries in the `position_clicks` table**. No mock data or other sources are to be used for counts or the presence of positions in these lists.
* **Dynamic Card Generation & Centering (Top Positions):**
    * Limit to **top 3** positions with the most 'apply' clicks.
    * If fewer than 3 positions have `apply` clicks (e.g., only 1 or 2 available positions with clicks), only display the available cards.
    * These cards **must be horizontally centered** if there are 1 or 2 cards.
* **"All Applied Positions Listing" Design:** Should have a "futuristic design and beautiful visual effects." This design needs to seamlessly blend *within the hero section's aesthetic*.
* **Pagination & "View More/Less" Functionality:**
    * The initial listing view must be paginated with a limit of **4 positions per page**.
    * A "View More Positions" button/icon should appear if there are more than 4 positions available that have 'apply' clicks.
    * When "View More Positions" is clicked, it should reveal *all* remaining positions (loading them from the database) and replace the "View More" button with a "View Less Positions" button.
    * When "View Less Positions" is clicked, the listing should **restore its initial paginated state** (showing only the first 4 positions).
* **Full Localization:** All user-facing text (static UI and dynamic content: position titles, labels like "Applied", pagination controls, button texts) must be localized for English, Russian, and Uzbek.
* **Preserve Proper Nouns:** "Millat Umidi" and "Millat Umidi Group" must remain untranslated.

---

### **Section 1: Database Schema & Backend API Development**

"**Objective:** Ensure database schemas support application tracking via `position_clicks` and develop optimized API endpoints for both the 'Top Applied' and 'All Applied' position data, with localization.

**Instructions for the AI Code Agent:**

1.  **Database Schema (Confirmation/Refinement):**
    * **`position_clicks` table:** Confirm this table exists and contains `position_id` and `click_type` (specifically 'apply') columns. This is the source for all application counts.
    * **`Positions` table:** Ensure this table has `id` and localized title fields (e.g., `title_en`, `title_ru`, `title_uz` or a translation table structure).
    * Ensure proper foreign key relationships between `position_clicks.position_id` and `Positions.id`.

2.  **API Endpoints:**
    * **`/api/top-applied-positions`:**
        * **Purpose:** Retrieve up to 3 positions with the highest count of `click_type: "apply"` entries from `position_clicks`.
        * **Logic:**
            * Group `position_clicks` by `position_id` where `click_type = 'apply'`.
            * Count the occurrences for each `position_id`.
            * Order the results by count in descending order.
            * Limit the results to the top 3.
            * Join with the `Positions` table to get the localized `position_name` for each `position_id`.
        * **Response Format:** An array of objects, e.g., `[{ position_id: 7, position_name: {en: "...", ru: "...", uz: "..."}, applied_count: 43 }, ...]`. Only include positions that have at least one 'apply' click.
    * **`/api/all-applied-positions`:**
        * **Purpose:** Retrieve a list of *all* positions that have at least one `click_type: "apply"` entry, along with their total 'apply' counts. This endpoint should return the *full list* for the "View More" functionality, allowing the frontend to handle the 4-item pagination for the initial view.
        * **Parameters:** No pagination parameters needed for this endpoint as it returns the full list to support "View More".
        * **Logic:**
            * Group `position_clicks` by `position_id` where `click_type = 'apply'`.
            * Count the occurrences for each `position_id`.
            * Filter to include only positions with `applied_count` greater than 0.
            * Join with the `Positions` table to get the localized `position_name`.
            * Order the results by `applied_count` (e.g., descending).
        * **Response Format:** An array of objects, e.g., `[{ position_id: 7, position_name: {en: "...", ru: "...", uz: "..."}, applied_count: 43 }, ...]`.
    * **Localization Handling in APIs:** Both endpoints must return localized position names based on the `Accept-Language` header or a `lang` query parameter. Implement graceful fallback (e.g., to English) if a translation is missing for a specific locale.

**Deliverables for this Section:**
* Confirmed/refined database schema for `position_clicks` and `Positions`.
* New or refined API endpoints: `/api/top-applied-positions` and `/api/all-applied-positions`.
* Backend logic to accurately count 'apply' clicks from `position_clicks` and retrieve localized position names.
* Robust error handling and validation for API endpoints."

---

### **Section 2: Frontend UI & Component Development**

"**Objective:** Implement the frontend components for both position display sections, ensuring they are placed **within the hero section**, adhere to specified designs, dynamic behaviors (including "View More/Less"), and full localization.

**Instructions for the AI Code Agent:**

1.  **"Top Applied Positions" Component (within Hero Section):**
    * **Placement:** Insert this component directly within the hero section, below existing elements (like the 'Explore Career Opportunities' button and any existing stat cards if they remain).
    * **Data Fetching:** Fetch data from `/api/top-applied-positions`.
    * **Dynamic Rendering:**
        * Render 1, 2, or 3 cards based on the number of positions returned.
        * If no positions have 'apply' clicks, this entire component should not be rendered.
    * **Layout & Centering:**
        * Use a flexbox or grid layout to display the cards horizontally.
        * If 1 or 2 cards, use `justify-content: center` (or equivalent) to ensure they are horizontally centered within their container.
    * **Card Design:** Precisely mimic the design style from "Screenshot 2025-07-16 at 12.26.57 PM.png" (rounded corners, subtle background, distinct number styling, font styles).
    * **Content per Card:**
        * Rank (e.g., "#1", "#2", "#3") – determined by order in the API response.
        * **Localized Position Name** (e.g., "HR Generalist", "Кадровый аналитик", "Kadrlar bo'yicha mutaxassis").
        * **Application Count** (e.g., "43").
        * **Localized Label for Applicants/Applied** (e.g., "Applicants", "Соискателей", "So'rovchilar").

2.  **"All Applied Positions Listing" Component (Immediately Below Top Positions, WITHIN Hero Section):**
    * **Placement:** This component must be placed directly below the "Top Applied Positions" component, still **contained within the overall hero section**.
    * **Design:** Implement a "futuristic design and beautiful visual effects" for this listing view. This implies:
        * Modern, clean card/list item design for each position.
        * Subtle animations, hover effects, and transitions.
        * Consistent use of typography and color palette for a sleek look that **harmonizes with the hero section's existing design**.
    * **Data Fetching & Initial Display:**
        * Fetch the *full list* of positions with applicants from `/api/all-applied-positions`.
        * Initially, display only the **first 4 positions**.
        * Implement client-side state to manage whether the full list or the paginated list is displayed.
    * **Content per Listing Item:** Each item should be a card-like element displaying:
        * **Localized Position Name** (as the main heading/title).
        * **Total Applied Count** for that position (e.g., "43 Applied"). The label "Applied" must be localized.
    * **"View More / View Less Positions" Button/Icon:**
        * If the total number of positions with applicants is greater than 4, display a "View More Positions" button/icon.
        * **On "View More" Click:** Load and display *all* available positions. Replace "View More Positions" with "View Less Positions".
        * **On "View Less" Click:** Revert the display to only show the initial 4 positions. Replace "View Less Positions" with "View More Positions".
        * These button texts ("View More Positions", "Показать больше позиций", "Ko'proq lavozimlarni ko'rish" / "View Less Positions", "Показать меньше позиций", "Kamroq lavozimlarni ko'rish") must be localized.
    * **No Listing if no applicants:** If `/api/all-applied-positions` returns no positions (i.e., no positions have received 'apply' clicks), this entire listing component should not be rendered.

3.  **Localization Integration (General):**
    * Ensure all new static labels (e.g., section titles like "Top Applied Positions", "All Available Positions with Applicants") are added to the i18n system and correctly displayed in the active language.
    * Ensure dynamic data (position names) is rendered in the active language based on API responses.
    * Validate that text length variations due to localization do not break layouts, especially in the responsive design. Special attention needed to keep the hero section from becoming excessively long or cluttered due to these additions.

**Deliverables for this Section:**
* Functional `Top Applied Positions` component integrated into the hero section, adhering to design and centering rules.
* Functional `All Applied Positions Listing` component, placed immediately below the top positions, **still within the hero section**, with futuristic design, initial 4-item display, and interactive "View More/Less" functionality.
* Full localization for all UI text and dynamic content in both components.
* Robust frontend data fetching, state management for "View More/Less", and error handling for both sections.
* Confirmation that the overall hero section's existing UI/UX is not negatively impacted despite containing these new components.

---

### **Section 3: Technical SEO & Testing**

"**Objective:** Ensure SEO friendliness for new dynamic content and comprehensive testing.

**Instructions for the AI Code Agent:**

1.  **SEO Considerations:**
    * Ensure the hero section (now containing these lists) remains SEO-friendly.
    * While the "View More/Less" functionality alters client-side display, ensure the underlying data is accessible for search engines if possible (e.g., through proper semantic HTML or server-side rendering of the full list for bots, if the chosen framework supports it).

2.  **Automated Testing (Enhanced):**
    * **Backend:** Test `top-applied-positions` and `all-applied-positions` endpoints for:
        * Accurate counting of `click_type: "apply"` from `position_clicks`.
        * Correct sorting for top positions.
        * Accurate localization of position names in responses.
    * **Frontend:** Test UI components for:
        * Correct placement **within the hero section**.
        * Dynamic rendering of 1, 2, or 3 top cards and their correct centering.
        * Accurate display of position names and applied counts.
        * Functionality of "View More" button to show all.
        * Functionality of "View Less" button to revert to 4.
        * Handling of scenarios with fewer than 4 positions with applicants.
        * Visual adherence to "futuristic design" for the listing.
        * Responsiveness and layout stability across all supported languages **within the hero section constraints**.

3.  **Manual QA Guidance:**
    * Verify the visual appearance and functionality of both the "Top Applied Positions" section and the "All Applied Positions Listing" **entirely within the hero section** in all three languages.
    * Specifically check centering of top cards for 1 or 2 items.
    * Test "View More Positions" and "View Less Positions" functionality thoroughly, ensuring it correctly expands and collapses the list.
    * Confirm all numbers and localized labels are correct.
    * Ensure that the `position_clicks` data directly translates to the displayed 'applied' counts, and no mock data is present. Verify that if only one position has applications, only that position is displayed in both sections (appropriately).
    * **Critically, verify that the hero section's existing design (main heading, image, primary button) remains intact and not visually compromised or elongated by the addition of these new components.**

**Deliverables for this Section:**
* Updated automated test suite for new API logic and frontend components.
* Detailed manual QA checklist focusing on new functionality, design, localization, and crucial hero section placement validation."