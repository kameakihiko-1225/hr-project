Implement full website localization for all pages and components, supporting English (en), Russian (ru), and Uzbek (uz) languages. This includes all text content, UI elements, date/time formats, and any other culturally sensitive aspects.

Key Principles for Implementation:

Internationalization (i18n) First: The codebase should be prepared to handle multiple languages efficiently, separating content from code.

Maintainability & Scalability: The solution should be easy to update with new translations and potentially new languages in the future.

User Experience (UX): Users should have a clear and intuitive way to switch languages, and the localized content should be natural and culturally appropriate.

SEO Considerations: Implement hreflang tags and other multilingual SEO best practices.

Detailed Task Breakdown & Prompt Sections:

Section 1: Setup & Core Internationalization (i18n) Architecture
"Objective: Establish the fundamental internationalization (i18n) architecture across the entire website to support English, Russian, and Uzbek.

Instructions for the AI Code Agent:

Extract All Hardcoded Strings:

Thoroughly scan all HTML templates, JavaScript files, and any server-side rendered content for hardcoded text strings (e.g., headings, paragraphs, button labels, error messages, placeholders, image alt text, titles, descriptions).

Replace these hardcoded strings with dynamic keys or placeholders that can be referenced by a translation system.

Example: <h1>Join Our Mission to Transform Education</h1> becomes <h1>{t('homepage.mission_heading')}</h1>

Implement a Robust Translation Management System (TMS) Integration (or File-Based System):

Option A (Preferred: TMS Integration): If an existing TMS API is available (e.g., Lokalise, Phrase, Crowdin), integrate the website to fetch translations dynamically via this API based on the selected language. Provide the necessary API keys and endpoints.

Option B (Alternative: File-Based JSON/YAML): If no TMS is used, create a structured file-based system (e.g., locales/en.json, locales/ru.json, locales/uz.json) to store all translation strings as key-value pairs. Implement a mechanism to load the appropriate language file at runtime.

Ensure the structure allows for easy organization (e.g., homepage.title, navigation.about_us, button.submit).

Language Detection and Persistence:

Implement logic to detect the user's preferred language (e.g., from browser Accept-Language header, user settings, or a default).

Persist the user's language preference (e.g., using local storage, cookies, or session on the server-side) so it's remembered across sessions.

Global Language State Management:

Ensure a global state or context exists that holds the current active language, making it accessible to all components and pages for dynamic rendering.

Deliverables for this Section:

Modified codebase with hardcoded strings replaced by i18n keys.

Implementation of chosen translation loading mechanism (TMS integration or file-based system).

Language detection and persistence logic.

Global language state management."

Section 2: UI & Content Localization (L10n)
"Objective: Localize all visible UI elements and content across all pages and components for English, Russian, and Uzbek, addressing layout and cultural nuances.

Instructions for the AI Code Agent:

Translate All Extracted Strings:

Populate the en.json, ru.json, and uz.json (or TMS entries) with accurate and contextually appropriate translations for all previously extracted keys.

For AI-generated translations: Prioritize accuracy and natural flow. For complex or nuanced phrases, flag them for human review if the AI's confidence is low.

Specific Translation Notes:

English (en): Standard American English.

Russian (ru): Standard Literary Russian.

Uzbek (uz): Standard Literary Uzbek (Cyrillic script for now, if Latin is also desired, specify).

Implement Language Switcher:

Add a prominent and user-friendly language switcher component (e.g., a dropdown in the header/footer) allowing users to easily switch between English, Russian, and Uzbek.

Display the language names in their native script (e.g., "English", "Русский", "O'zbek").

Layout and Design Adaptations for Text Expansion/Contraction:

Review all components and pages to ensure the layout remains visually appealing and functional when text length changes due to translation (e.g., Russian and Uzbek text can often be longer than English).

Adjust CSS properties (e.g., min-width, flex-wrap, line-height) as needed to accommodate varying text lengths without overflow or awkward wrapping.

Date, Time, Number, and Currency Formatting:

Implement locale-specific formatting for dates, times, numbers, and currencies across the website (e.g., MM/DD/YYYY for English, DD.MM.YYYY for Russian, different currency symbols and decimal separators).

Image and Media Localization (if applicable):

If images or media contain embedded text, identify them.

Option A (Preferred): If source files are available, create localized versions of these images with translated text.

Option B (Alternative): Implement a mechanism to dynamically overlay translated text on images if design allows, or use different image paths based on the selected language.

"Join Our Mission" Section (Specific to previous request):

Ensure the image is precisely positioned so its top aligns with the top of the "Join Our Mission to Transform Education" heading across all three languages.

Ensure "Umidjon Ishmukhamedov, Founder of Millat Umidi Group" text is horizontally aligned with the bottom of the "Explore Career Opportunities" button across all three languages.

Re-evaluate and adjust spacing in this section to ensure visual balance and readability for all three languages.

(Confirm whether the "15+ Years of Experience" and "1000+ Students Impacted" sections should be present or removed as per the previous discussion.)

Deliverables for this Section:

Complete translation files for English, Russian, and Uzbek.

Functional language switcher component.

Responsive and adaptable UI/layout for all languages.

Correct locale-specific formatting for dates, times, numbers, and currencies.

Localized images/media (or a plan for their implementation).

Corrected "Join Our Mission" section layout for all languages. "

Section 3: Technical SEO & Testing
"Objective: Optimize the localized website for search engines and ensure a high-quality user experience.

Instructions for the AI Code Agent:

Implement hreflang Tags:

For every localized page, dynamically add hreflang attributes in the HTML <head> section, linking to the equivalent pages in English, Russian, and Uzbek.

Example: <link rel="alternate" href="https://yourwebsite.com/en/page" hreflang="en" />

Example: <link rel="alternate" href="https://yourwebsite.com/ru/page" hreflang="ru" />

Example: <link rel="alternate" href="https://yourwebsite.com/uz/page" hreflang="uz" />

Also include an x-default tag if there's a default language or page.

URL Structure (if not already handled):

Ensure a consistent and clear URL structure for localized content (e.g., yourwebsite.com/en/, yourwebsite.com/ru/, yourwebsite.com/uz/ or subdomains like en.yourwebsite.com). If not already implemented, propose and implement this.

Multilingual SEO Best Practices:

Advise on keyword research for each language, though actual content optimization is outside this coding task.

Automated Testing:

Implement automated tests (e.g., Jest, Cypress, Selenium) to verify:

Language switching functionality.

Correct display of translated strings.

Proper formatting of dates, numbers, and currencies for each locale.

Layout stability across different languages.

Manual QA Guidance:

Provide a checklist for human QA testers to verify:

Linguistic accuracy and cultural appropriateness.

Tone of voice consistency.

Visual alignment and responsiveness on various devices for all languages.

Functionality of all interactive elements.

Deliverables for this Section:

Implemented hreflang tags.

Confirmation/implementation of a robust URL structure for localization.

Automated tests for localization features.

A comprehensive manual QA checklist."

Before running this prompt, ensure you can provide the AI agent with:

Access to your current codebase: This is crucial for it to identify hardcoded strings, modify files, and understand the existing structure.

Any existing design guidelines or component libraries: This will help it maintain consistency.

Confirmation on the Uzbek script (Cyrillic vs. Latin): If both are needed, the prompt can be adapted further.