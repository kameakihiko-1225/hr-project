generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique
  passwordHash     String            @map("password_hash")
  isSuperAdmin     Boolean           @default(false) @map("is_superadmin")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  bots             Bot?
  companies        Company[]
  messageCampaigns MessageCampaign[]
  trainingSessions TrainingSession[]

  @@map("admins")
}

model Company {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  logoUrl          String?           @map("logo_url")
  color            String?
  address          String?
  phone            String?
  email            String?
  city             String?
  country          String?
  description      String?
  adminId          String            @map("admin_id") @db.Uuid
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  bitrixMaps       BitrixMapping[]
  bots             Bot[]
  admin            Admin             @relation(fields: [adminId], references: [id])
  companyBots      CompanyBot[]
  industries       CompanyIndustry[]
  departments      Department[]
  documents        Document[]
  files            FileStorage[]
  messageCampaigns MessageCampaign[]
  positions        Position[]

  @@map("companies")
}

model FileStorage {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName   String   @map("file_name")
  fileType   String   @map("file_type")
  fileData   Bytes    @map("file_data")
  fileSize   Int      @map("file_size")
  companyId  String?  @map("company_id") @db.Uuid
  uploadedAt DateTime @default(now()) @map("uploaded_at") @db.Timestamp(6)
  company    Company? @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@map("file_storage")
}

model Department {
  id               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String?
  companyId        String               @map("company_id") @db.Uuid
  createdAt        DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  positions        DepartmentPosition[]
  company          Company              @relation(fields: [companyId], references: [id])
  documents        Document[]
  messageCampaigns MessageCampaign[]

  @@index([companyId])
  @@map("departments")
}

model Position {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String
  description          String?
  location             String?
  city                 String?
  country              String?
  salaryRange          String?              @map("salary_range")
  employmentType       String?              @map("employment_type")
  expectedStartDate    DateTime?            @map("expected_start_date") @db.Date
  languageRequirements String?              @map("language_requirements")
  qualifications       String?
  responsibilities     String?
  createdAt            DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  companyId            String?              @map("company_id") @db.Uuid
  interviewQuestions   Json?                @map("interview_questions")
  phase2Questions      Json?                @map("phase2_questions")
  applyLink            String?              @db.VarChar(2048)
  candidates           Candidate[]
  departments          DepartmentPosition[]
  documents            Document[]
  messageCampaigns     MessageCampaign[]
  company              Company?             @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "positions_company_fk")
  trainingSessions     TrainingSession[]

  @@index([title])
  @@map("positions")
}

model DepartmentPosition {
  departmentId String     @map("department_id") @db.Uuid
  positionId   String     @map("position_id") @db.Uuid
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  position     Position   @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@id([departmentId, positionId])
  @@index([departmentId])
  @@index([positionId])
  @@map("department_positions")
}

model Bot {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token              String       @unique
  company_id         String?      @db.Uuid
  adminId            String       @unique @map("admin_id") @db.Uuid
  createdAt          DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  active             Boolean      @default(true)
  availableLanguages Json         @default("[\"en\", \"ru\", \"uz\"]") @map("available_languages")
  defaultLanguage    String       @default("en") @map("default_language")
  name               String
  questionsPhase1    Json?        @map("questions_phase1")
  questionsPhase2    Json?        @map("questions_phase2")
  updatedAt          DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
  username           String?      @unique
  webhookActive      Boolean      @default(false) @map("webhook_active")
  webhookUrl         String?      @map("webhook_url")
  admin              Admin        @relation(fields: [adminId], references: [id])
  companies          Company?     @relation(fields: [company_id], references: [id], onDelete: Restrict)
  candidates         Candidate[]
  companyBots        CompanyBot[]

  @@index([company_id])
  @@map("bots")
}

model Candidate {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullName             String?        @map("full_name")
  email                String?
  phone                String?
  telegramId           String?        @unique @map("telegram_id")
  country              String?
  region               String?
  positionId           String?        @map("position_id") @db.Uuid
  botId                String?        @map("bot_id") @db.Uuid
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  birthDate            DateTime?      @map("birth_date") @db.Date
  canWorkInCity        Boolean?       @map("can_work_in_city")
  currentlyEmployed    Boolean?       @map("currently_employed")
  cvUrl                String?        @map("cv_url")
  englishLevel         String?        @map("english_level")
  gender               String?
  lastActivity         DateTime       @default(now()) @map("last_activity") @db.Timestamp(6)
  otherLanguages       String?        @map("other_languages")
  phase1Responses      Json?          @map("phase1_responses")
  preferredLanguage    String         @default("en") @map("preferred_language")
  referralSource       String?        @map("referral_source")
  salaryExpectation    String?        @map("salary_expectation")
  startDate            String?        @map("start_date")
  status               String         @default("new")
  telegramUsername     String?        @map("telegram_username")
  updatedAt            DateTime       @updatedAt @map("updated_at") @db.Timestamp(6)
  workPermit           Boolean?       @map("work_permit")
  workType             String?        @map("work_type")
  startTimePhase1      DateTime?      @map("start_time_phase1") @db.Timestamp(6)
  startTimePhase2      DateTime?      @map("start_time_phase2") @db.Timestamp(6)
  bitrixStageStartTime Json?          @map("bitrix_stage_start_time")
  startToken           String?        @unique @map("start_token")
  aiAssessment         Json?          @map("ai_assessment")
  companyId            String?        @map("company_id") @db.Uuid
  completionTimePhase2 DateTime?      @map("completion_time_phase2") @db.Timestamp(6)
  departmentId         String?        @map("department_id") @db.Uuid
  bot                  Bot?           @relation(fields: [botId], references: [id])
  position             Position?      @relation(fields: [positionId], references: [id])
  chatSessions         ChatSession[]
  crmDeals             CrmDeal[]
  interviews           Interview[]
  messagesQueue        MessageQueue[]
  smsLogs              SmsLog[]

  @@index([positionId])
  @@index([botId])
  @@index([status])
  @@index([departmentId])
  @@index([companyId])
  @@map("candidates")
}

model Interview {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId     String    @map("candidate_id") @db.Uuid
  phase1Completed Boolean   @default(false) @map("phase_1_completed")
  phase2Completed Boolean   @default(false) @map("phase_2_completed")
  summary         String?
  score           Decimal?  @db.Decimal
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  candidate       Candidate @relation(fields: [candidateId], references: [id])

  @@map("interviews")
}

model ChatSession {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId   String    @map("candidate_id") @db.Uuid
  messages      Json?
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  currentPhase  Int       @default(1) @map("current_phase")
  currentStep   String?   @map("current_step")
  language      String    @default("en")
  lastMessageAt DateTime  @default(now()) @map("last_message_at") @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  candidate     Candidate @relation(fields: [candidateId], references: [id])

  @@map("chat_sessions")
}

model TrainingSession {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId        String   @map("admin_id") @db.Uuid
  positionId     String   @map("position_id") @db.Uuid
  sessionName    String?  @map("session_name")
  chatHistory    Json?    @map("chat_history")
  trainingStatus String   @default("active") @map("training_status")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  admin          Admin    @relation(fields: [adminId], references: [id])
  position       Position @relation(fields: [positionId], references: [id])

  @@index([adminId])
  @@index([positionId])
  @@index([trainingStatus], map: "training_sessions_status_idx")
  @@map("training_sessions")
}

model Document {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId           String?         @map("company_id") @db.Uuid
  departmentId        String?         @map("department_id") @db.Uuid
  positionId          String?         @map("position_id") @db.Uuid
  fileUrl             String?         @map("file_url")
  fileType            String?         @map("file_type")
  uploadedAt          DateTime        @default(now()) @map("uploaded_at") @db.Timestamp(6)
  title               String?
  content             String?
  file_name           String?
  file_size           Int?
  processing_status   String          @default("pending")
  content_type        String?
  training_parameters Json?
  embeddings          Json?
  chunk_count         Int             @default(0)
  processed_at        DateTime?       @db.Timestamp(6)
  updated_at          DateTime        @default(now()) @db.Timestamp(6)
  trainingParams      Json?           @map("training_params")
  chunks              DocumentChunk[]
  company             Company?        @relation(fields: [companyId], references: [id])
  department          Department?     @relation(fields: [departmentId], references: [id])
  position            Position?       @relation(fields: [positionId], references: [id])

  @@index([content_type])
  @@index([positionId])
  @@index([processing_status])
  @@map("documents")
}

model BitrixMapping {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId       String   @map("company_id") @db.Uuid
  webhookUrl      String?  @map("webhook_url")
  stageNew        String?  @map("stage_new")
  stageNoResponse String?  @map("stage_no_response")
  stageRejected   String?  @map("stage_rejected")
  fieldMap        Json?    @map("field_map")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  company         Company  @relation(fields: [companyId], references: [id])

  @@map("bitrix_mappings")
}

model CrmDeal {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId String    @map("candidate_id") @db.Uuid
  dealId      String?   @map("deal_id")
  status      String?
  syncedAt    DateTime  @default(now()) @map("synced_at") @db.Timestamp(6)
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("crm_deals")
}

model SmsLog {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId String    @map("candidate_id") @db.Uuid
  message     String?
  mediaType   String?   @map("media_type")
  mediaId     String?   @map("media_id")
  sent_at     DateTime  @default(now()) @db.Timestamp(6)
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("sms_logs")
}

model MessageQueue {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId  String    @map("candidate_id") @db.Uuid
  message      String?
  type         String?
  scheduledFor DateTime? @map("scheduled_for") @db.Timestamp(6)
  sent         Boolean   @default(false)
  candidate    Candidate @relation(fields: [candidateId], references: [id])

  @@map("messages_queue")
}

model IndustryTag {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String            @unique
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  companies CompanyIndustry[]

  @@map("industry_tags")
}

model CompanyIndustry {
  companyId     String      @map("company_id") @db.Uuid
  industryTagId String      @map("industry_tag_id") @db.Uuid
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  industryTag   IndustryTag @relation(fields: [industryTagId], references: [id], onDelete: Cascade)

  @@id([companyId, industryTagId])
  @@map("company_industries")
}

model MessageCampaign {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  message           String
  mediaType         String?            @map("media_type")
  mediaFileId       String?            @map("media_file_id")
  mediaUrl          String?            @map("media_url")
  adminId           String             @map("admin_id") @db.Uuid
  companyId         String?            @map("company_id") @db.Uuid
  departmentId      String?            @map("department_id") @db.Uuid
  positionId        String?            @map("position_id") @db.Uuid
  status            String             @default("draft")
  filterCriteria    Json?              @map("filter_criteria")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime           @map("updated_at") @db.Timestamp(6)
  admin             Admin              @relation(fields: [adminId], references: [id])
  company           Company?           @relation(fields: [companyId], references: [id])
  department        Department?        @relation(fields: [departmentId], references: [id])
  position          Position?          @relation(fields: [positionId], references: [id])
  scheduledMessages ScheduledMessage[]

  @@index([adminId])
  @@index([companyId])
  @@index([departmentId])
  @@index([positionId])
  @@map("message_campaigns")
}

model ScheduledMessage {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId    String          @map("campaign_id") @db.Uuid
  scheduledTime DateTime        @map("scheduled_time") @db.Timestamp(6)
  recurrence    String?
  lastRun       DateTime?       @map("last_run") @db.Timestamp(6)
  nextRun       DateTime?       @map("next_run") @db.Timestamp(6)
  status        String          @default("pending")
  sentCount     Int             @default(0) @map("sent_count")
  failedCount   Int             @default(0) @map("failed_count")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime        @map("updated_at") @db.Timestamp(6)
  campaign      MessageCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([nextRun])
  @@map("scheduled_messages")
}

model DocumentChunk {
  id         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId String?               @map("document_id") @db.Uuid
  content    String
  embedding  Unsupported("vector")
  createdAt  DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  document   Document?             @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([documentId])
  @@index([embedding])
  @@map("document_chunks")
}

model CompanyBot {
  companyId  String   @map("company_id") @db.Uuid
  botId      String   @map("bot_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp(6)
  bot        Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([companyId, botId])
  @@index([botId])
  @@index([companyId])
  @@map("company_bots")
}
